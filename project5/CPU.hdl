// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // load A-instr or ALU-output
    Mux16(a=instruction, b=aluOutput, sel=instruction[15], out=muxToA);

    // reg A
    ARegister(in=muxToA, load=loadA, out=A, out[0..14]=addressM, out=instrAddr);
    Or(a=cInstrLoadA, b=aInstr, out=loadA);
    Not(in=instruction[15], out=aInstr);
    And(a=instruction[5], b=instruction[15], out=cInstrLoadA);

    // mux16: inM or A reg: a-bit
    Mux16(a=A, b=inM, sel=instruction[12], out=AorM);

    // reg D
    DRegister(in=aluOutput, load=cInstrLoadD, out=D);
    And(a=instruction[4], b=instruction[15], out=cInstrLoadD);
    
    // ALU
    ALU(x=D, y=AorM, zx=instruction[11], nx=instruction[10],
                    zy=instruction[9], ny=instruction[8],
                    f=instruction[7], no=instruction[6],
                    out=aluOutput, out=outM, zr=zr, ng=ng);

    // write to M
    And(a=instruction[3], b=instruction[15], out=writeM);

    // jmp
    Not(in=ng, out=pos);
    Not(in=zr, out=notZr);
    And(a=pos, b=notZr, out=positive);
    And(a=instruction[0], b=instruction[15], out=j03);
    And(a=instruction[1], b=instruction[15], out=j02);
    And(a=instruction[2], b=instruction[15], out=j01);
    And(a=j03, b=positive, out=j3);
    And(a=j02, b=zr, out=j2);
    And(a=j01, b=ng, out=j1);
    Or(a=j1, b=j2, out=j12);
    Or(a=j12, b=j3, out=jmp);

    // program counter
    PC(in=instrAddr, load=jmp, inc=true, reset=reset, out[0..14]=pc);
}